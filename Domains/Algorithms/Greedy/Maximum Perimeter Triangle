#include <bits/stdc++.h>

using namespace std;

vector <int> maximumPerimeterTriangle(vector <int> l) {
    sort(l.begin(), l.end());
    vector <int>ans;
    int n = l.size();
    int first, second, third, perimeter, maxP = INT_MIN, longestSide = INT_MIN, shortestSide = INT_MIN, flag = 0, middleSide;
    for(int i = 0; i < n - 2; i++) {
        first = l[i];
        second = l[i + 1];
        for(int j = i + 2; j < n; j++) {
            third = l[j];
            if((first + second) <= third) {
                break;
            } else {
                flag = 1;
                perimeter = first + second + third;
                if(perimeter >= maxP) {
                    maxP = perimeter;
                    if(third >= longestSide) {
                        longestSide = third;
                        if(first >= shortestSide) {
                            shortestSide = first;
                            middleSide = second;
                        }
                    }
                }
            }
        }
    }
    if(flag) {
        ans.push_back(shortestSide);
        ans.push_back(middleSide);
        ans.push_back(longestSide);
    } else {
        ans.push_back(-1);
    }
    return(ans);
}

int main() {
    int n;
    cin >> n;
    vector<int> l(n);
    for(int l_i = 0; l_i < n; l_i++){
       cin >> l[l_i];
    }
    vector <int> result = maximumPerimeterTriangle(l);
    for (ssize_t i = 0; i < result.size(); i++) {
        cout << result[i] << (i != result.size() - 1 ? " " : "");
    }
    cout << endl;
    return 0;
}
