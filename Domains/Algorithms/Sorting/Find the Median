#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;


// Using Quickselect algorithm

int findLocation(int arr[], int low, int high) {
    int pivot = arr[low], i = low + 1, j = high;
    while(i <= j) {
        while(arr[i] <= pivot) {
            i++;
        } while(arr[j] > pivot) {
            j--;
        }
        if(i < j) {
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i++;
            j--;
        }
    }
    int temp = pivot;
    arr[low] = arr[j];
    arr[j] = pivot;
    return(j);
}

int findKthSmallest(int arr[], int low, int high, int k) {
    int loc = findLocation(arr, low, high);
    if(loc == k) {
        return(arr[k]);
    } else if(loc > k) {
        return(findKthSmallest(arr, low, loc - 1, k));
    } else {
        return(findKthSmallest(arr, loc + 1, high, k));
    }
}

int main() {
    int n, k;
    cin>>n;
    int arr[n], median;
    for(int i = 0; i < n; i++) {
        cin>>arr[i];
    }
    int half = n/2;
    if((n % 2) == 0) {
        int one = findKthSmallest(arr, 0, n-1, half), two = findKthSmallest(arr, 0, n-1, half - 1);
        median = (one + two)/2;
    } else {
        median = findKthSmallest(arr, 0, n-1, half);
    }
    cout<<median<<endl;
    return 0;
}
