#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <stack>
using namespace std;

struct movement {
    int row, col, waves;
};

int main() {
    int test;
    cin>>test;
    while(test--) {
        int n, m, start_r, start_c, dest_r, dest_c;
        cin>>n>>m;
        char forest[n][m];
        int visited[n][m];
        stack <movement>s;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                visited[i][j] = 0;
            }
        }
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < m; j++) {
                cin>>forest[i][j];
                if(forest[i][j] == 'M') {
                    start_r = i;
                    start_c = j;
                }
                if(forest[i][j] == '*') {
                    dest_r = i;
                    dest_c = j;
                }
            }
        }
        int k, current_r  = start_r, current_c = start_c, current_wave = 0, up, down, left, right, possibilities;
        cin>>k;
        while(current_r != dest_r || current_c != dest_c) {
            visited[current_r][current_c] = 1;
            up = (current_r >=1 && (forest[current_r - 1][current_c] == '.' || forest[current_r - 1][current_c] == '*')&& !visited[current_r - 1][current_c]) ? 1 : 0;
            down = (current_r < (n - 1) && (forest[current_r + 1][current_c] == '.' || forest[current_r + 1][current_c] == '*') && !visited[current_r + 1][current_c]) ? 1 : 0;
            left = (current_c >= 1 && (forest[current_r][current_c - 1] == '.' || forest[current_r][current_c - 1] == '*') && !visited[current_r][current_c - 1]) ? 1 : 0;
            right = (current_c < (m - 1) && (forest[current_r][current_c + 1] == '.' || forest[current_r][current_c + 1] == '*') && !visited[current_r][current_c + 1]) ? 1 : 0;
            possibilities = (up + down + left + right);
            if(possibilities == 0) {
                movement move = s.top();
                current_r = move.row;
                current_c = move.col;
                current_wave = move.waves;
                s.pop();
            }
            else if(possibilities == 1) {
                if(up) {
                    current_r = current_r - 1;
                }
                else if(down) {
                    current_r = current_r + 1;
                } else if(left) {
                    current_c = current_c - 1;
                } else {
                    current_c = current_c + 1;
                }
            } else {
                current_wave += 1;
                if(up) {
                    movement move;
                    move.row = current_r - 1;
                    move.col = current_c;
                    move.waves = current_wave;
                    s.push(move);
                } if(down) {
                    movement move;
                    move.row = current_r + 1;
                    move.col = current_c;     
                    move.waves = current_wave;
                    s.push(move);
                } if(left) {
                    movement move;
                    move.row = current_r;
                    move.col = current_c - 1;
                    move.waves = current_wave;
                    s.push(move);
                } if(right) {
                    movement move;
                    move.row = current_r;
                    move.col = current_c + 1;
                    move.waves = current_wave;
                    s.push(move);
                }
                movement move = s.top();
                current_r = move.row;
                current_c = move.col;
                current_wave = move.waves;
                s.pop();
            }
        }
        if(current_wave == k) {
            cout<<"Impressed"<<endl;
        } else {
            cout<<"Oops!"<<endl;
        }
    }
    return 0;
}
