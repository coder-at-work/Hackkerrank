#include <stdio.h>

int flood_fill(int m, int grid[][m], int visited[][m], int current_r, int current_c, int row, int column) {
    if(current_r < 0 || current_c < 0 || current_r >= row || current_c >= column) {
        return 0;
    }
    if(grid[current_r][current_c] == 0 || visited[current_r][current_c] == 1) {
        return 0;
    }
    visited[current_r][current_c] = 1;
    int a = flood_fill(m, grid, visited, current_r + 1, current_c, row, column);
    int b = flood_fill(m, grid, visited, current_r - 1, current_c, row, column);
    int c = flood_fill(m, grid, visited, current_r, current_c + 1, row, column);
    int d = flood_fill(m, grid, visited, current_r, current_c - 1, row, column);
    int e = flood_fill(m, grid, visited, current_r + 1, current_c + 1, row, column);
    int f = flood_fill(m, grid, visited, current_r + 1, current_c - 1, row, column);
    int g = flood_fill(m, grid, visited, current_r - 1, current_c - 1, row, column);
    int h = flood_fill(m, grid, visited, current_r - 1, current_c + 1, row, column);
    return(1 + a + b + c + d + e + f + g + h);
}
int main() {
    int n, m, max = -1, ans;
    scanf("%d%d", &n, &m);
    int grid[n][m], visited[n][m];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            scanf("%d", &grid[i][j]);
            visited[i][j] = 0;
        }
    }
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(grid[i][j] == 1 && visited[i][j] == 0) {
                ans = flood_fill(m, grid, visited, i, j, n, m);
                if(ans > max) {
                    max = ans;
                }
            }
        }
    }
    printf("%d\n", max);
    return 0;
}
